[{"/Users/Freddy/money-report/src/index.js":"1","/Users/Freddy/money-report/src/App.js":"2","/Users/Freddy/money-report/src/reportWebVitals.js":"3","/Users/Freddy/money-report/src/Components/Navbar/Navbar.js":"4","/Users/Freddy/money-report/src/Components/Scrollbar/Scrollbar.js":"5"},{"size":500,"mtime":1612248230230,"results":"6","hashOfConfig":"7"},{"size":434,"mtime":1615701032384,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1612248230232,"results":"9","hashOfConfig":"7"},{"size":1917,"mtime":1616302424450,"results":"10","hashOfConfig":"7"},{"size":6729,"mtime":1616302733968,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12lqb4l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/Freddy/money-report/src/index.js",[],["25","26"],"/Users/Freddy/money-report/src/App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar/Navbar'\nimport 'semantic-ui-css/semantic.min.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport Scrollbar from './Components/Scrollbar/Scrollbar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Scrollbar></Scrollbar>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Freddy/money-report/src/reportWebVitals.js",[],"/Users/Freddy/money-report/src/Components/Navbar/Navbar.js",[],"/Users/Freddy/money-report/src/Components/Scrollbar/Scrollbar.js",["28","29","30"],"import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport { Card, Grid, Modal, Form, Checkbox, Image, List, Button } from 'semantic-ui-react';\n\nexport default class Scrollbar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            open: false,\n            db: {\n                name: \"Freddy\",\n                amount: 0,\n                history: [{\n                    cost: true,\n                    howmany: 100,\n                    img: \"https://react.semantic-ui.com/images/avatar/large/steve.jpg\",\n                    detail: \"play\",\n                    description: \"play games\"\n                },\n                {\n                    cost: true,\n                    howmany: 100,\n                    img: \"https://react.semantic-ui.com/images/avatar/large/steve.jpg\",\n                    detail: \"play\",\n                    description: \"play games\"\n                }]\n            }\n        }\n    }\n    readDB() {\n        \n        this.setState({\n            db: (JSON.parse(localStorage.getItem(\"freddy_db\")))\n        })\n        console.log(this.state.db)\n    }\n\n    writeDB() {\n        localStorage.setItem(\"freddy_db\", JSON.stringify(this.state.db))\n    }\n\n    setOpen(val) {\n        this.setState({\n            open: val\n        })\n    }\n    handleAddSubmit = (e) => {\n        console.log(e)\n        if ((e.target[1].checked && e.target[2].checked) || !(e.target[1].checked || e.target[2].checked)) {\n            alert(\"You must select ONE option!\")\n            return\n        } else {\n            this.state.db.history.push({\n                cost: e.target[1].checked,\n                howmany: parseInt(e.target[0].value),\n                img: \"https://react.semantic-ui.com/images/avatar/large/steve.jpg\",\n                detail: e.target[3].value,\n                description: e.target[4].value\n            })\n            this.writeDB()\n            this.setOpen(false)\n            window.location.reload(false)\n        }\n    }\n\n    componentDidMount () {\n        this.readDB()\n    }\n\n    render() {\n        console.log(1)\n        console.log(this.state.db)\n        console.log(1)\n        const settings = {\n            dots: false,\n            infinite: true,\n            slidesToShow: 12,\n            slidesToScroll: 1,\n            vertical: true,\n            verticalSwiping: true,\n            beforeChange: function (currentSlide, nextSlide) {\n                console.log(\"before change\", currentSlide, nextSlide);\n            },\n            afterChange: function (currentSlide) {\n                console.log(\"after change\", currentSlide);\n            },\n            data: this.state.db\n        };\n        console.log(this.state.db)\n\n\n        return (\n            <div>\n                <Modal\n                    onClose={() => this.setOpen(false)}\n                    onOpen={() => this.setOpen(true)}\n                    open={this.state.open}>\n                    <Modal.Header>add a new thing</Modal.Header>\n                    <Modal.Content>\n                        <div>\n                            <Form onSubmit={this.handleAddSubmit}>\n                                <Form.Field>\n                                    <label>Howmany</label>\n                                    <input placeholder='Howmany' />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Checkbox label='Cost' />\n                                    <Checkbox label='Earn' />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Why</label>\n                                    <input placeholder='Why' />\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Description</label>\n                                    <input placeholder='Description' />\n                                </Form.Field>\n                                <Button type='submit'>Submit</Button>\n\n                            </Form>\n                        </div>\n                    </Modal.Content>\n                </Modal>\n                <Grid.Row id=\"sc-row\">\n                    <Grid.Column>\n                        <List celled>\n                            {/* <Card>\n                                <Card.Content>\n                                    <Image\n                                        floated='right'\n                                        size='mini'\n                                        src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n                                    />\n                                    <Card.Header>Steve Sanders</Card.Header>\n                                    <Card.Meta>Friends of Elliot</Card.Meta>\n                                    <Card.Description>\n                                        Steve wants to add you to the group <strong>best friends</strong>\n                                    </Card.Description>\n                                </Card.Content>\n                            </Card> */}\n                            {this.state.db.history.map((item) => {\n                                if (item.cost) {\n                                    var text = \"Cost:\" + item.howmany\n                                }\n                                else {\n                                    var text = \"Earn:\" + item.howmany\n                                }\n                                return <Card>\n                                    <Card.Content>\n                                        <Image\n                                            floated='right'\n                                            size='mini'\n                                            src='https://react.semantic-ui.com/images/avatar/large/steve.jpg'\n                                        />\n                                        <Card.Header>{text}</Card.Header>\n                                        <Card.Meta>{item.detail}</Card.Meta>\n                                        <Card.Description>{item.description}</Card.Description>\n                                    </Card.Content>\n                                </Card>\n                            })}\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n                <Button.Group widths='100%' id='buttons'>\n                    <Button class=\"button\">One</Button>\n                    <Button  class=\"button\" onClick={() => this.setOpen(true)}>Add</Button>\n                    <Button class=\"button\">Three</Button>\n                </Button.Group>\n            </div>\n        );\n    }\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"35","severity":1,"message":"40","line":74,"column":15,"nodeType":"37","messageId":"38","endLine":74,"endColumn":23},{"ruleId":"41","severity":1,"message":"42","line":146,"column":41,"nodeType":"37","messageId":"43","endLine":146,"endColumn":45},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Slider' is defined but never used.","'settings' is assigned a value but never used.","no-redeclare","'text' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]